from django.views.generic import ListView, DetailView, CreateView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.db.models import Q
from django.urls import reverse_lazy
from .models import Room, Review, Booking
from django.shortcuts import render, get_object_or_404, redirect
from django.views.decorators.http import require_POST
from django.contrib.auth.decorators import login_required
from .forms import CustomUserCreationForm
from .models import Booking, Room
from .forms import RoomCreateForm, Room, RoomForm
from .models import CustomUser, Tenant, Landlord

def home(request):
    return render(request, 'home.html')

class RoomListView(ListView):
    model = Room
    template_name = 'room_list.html'
    context_object_name = 'rooms'

    def get_queryset(self):
        max_price = self.request.GET.get('max_price')
        min_price = self.request.GET.get('min_price')
        dorm_name = self.request.GET.get('dorm_name')  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠
        room_name = self.request.GET.get('room_name')  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á

        queryset = Room.objects.all()

        if max_price:
            queryset = queryset.filter(price__lte=max_price)  # ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô max_price
        if min_price:
            queryset = queryset.filter(price__gte=min_price)  # ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ min_price

        if dorm_name:
            queryset = queryset.filter(dorm_name__icontains=dorm_name)  # ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö dorm_name
        
        if room_name:
            queryset = queryset.filter(room_name__icontains=room_name)  # ‡∏Å‡∏£‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö room_name

        return queryset

class RoomDetailView(DetailView):
    model = Room
    template_name = 'room_detail.html'
    context_object_name = 'room'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        return context

class RoomSearchView(ListView):
    model = Room
    template_name = 'room_search.html'
    context_object_name = 'rooms'

    def get_queryset(self):
        query = self.request.GET.get('q')
        return Room.objects.filter(
            Q(name__icontains=query) |
            Q(location__icontains=query) |
            Q(furniture__icontains=query)
        ) if query else Room.objects.all()

# Review View
class ReviewCreateView(LoginRequiredMixin, CreateView):
    model = Review
    fields = ['room', 'rating', 'comment']
    template_name = 'review_form.html'
    success_url = reverse_lazy('room_list')

    def form_valid(self, form):
        form.instance.tenant = self.request.user.tenant_profile
        return super().form_valid(form)
    
def all_rooms(request):
    rooms = Room.objects.all()  # ‡∏î‡∏∂‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    return render(request, 'all_rooms.html', {'rooms': rooms})

def booking_complete(request, booking_id):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ booking_id
    booking = get_object_or_404(Booking, id=booking_id)
    
    return render(request, 'booking_complete.html', {'booking': booking})

class BookingCreateView(LoginRequiredMixin, CreateView):
    model = Booking
    fields = ['room']
    template_name = 'booking_complete.html'
    
    def form_valid(self, form):
        form.instance.tenant = self.request.user.tenant_profile  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ tenant_profile ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö CustomUser
        booking = form.save()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        
        # Redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        return redirect('booking_complete', booking_id=booking.id)

def register(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()

            # üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏° role ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            if user.role == 'tenant':
                Tenant.objects.create(user=user, budget=0)  # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà budget ‡∏ï‡∏≤‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ
            elif user.role == 'landlord':
                Landlord.objects.create(user=user)

            return redirect('login')  # ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à
    else:
        form = CustomUserCreationForm()

    return render(request, 'registration/register.html', {'form': form})

def some_error_page(request):
    return render(request, 'some_error_page.html')

@require_POST
@login_required
def booking_create(request, pk):
    room = get_object_or_404(Room, pk=pk)

    if not request.user.is_authenticated:
        return redirect('login')  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà login

    if not hasattr(request.user, 'tenant_profile'):
        return redirect('some_error_page')  # ‡∏´‡∏£‡∏∑‡∏≠ error page ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ

    booking = Booking.objects.create(
        room=room,
        tenant=request.user.tenant_profile
    )

    return redirect('booking_complete', booking_id=booking.id)


# View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
@login_required
def room_create(request):
    if request.method == 'POST':
        form = RoomCreateForm(request.POST, request.FILES)  # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ
        if form.is_valid():
            room = form.save(commit=False)
            # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á (landlord) ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
            room.landlord = request.user.landlord_profile  # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
            room.save()
            return redirect('room_list')  # Redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    else:
        form = RoomCreateForm()
    return render(request, 'room_create.html', {'form': form})

@login_required
def add_room(request):
    if request.method == 'POST':
        form = RoomForm(request.POST, request.FILES)
        if form.is_valid():
            room = form.save(commit=False)

            # üëá ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ landlord_profile
            if hasattr(request.user, 'landlord_profile'):
                room.landlord = request.user.landlord_profile
                room.save()
                return redirect('room_list')
            else:
                return redirect('some_error_page')  # ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏≠
    else:
        form = RoomForm()
    return render(request, 'add_room.html', {'form': form})

def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.save()

            role = form.cleaned_data['role']
            if role == 'tenant':
                Tenant.objects.create(user=user, budget=0)
            elif role == 'landlord':
                Landlord.objects.create(user=user)

            return redirect('login')  # üëà ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    else:
        form = CustomUserCreationForm()
    return render(request, 'register.html', {'form': form})
